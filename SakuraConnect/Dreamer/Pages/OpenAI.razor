@page "/openai"
@using Sakura.Live.OpenAi.Core.Services
@using Sakura.Live.Connect.Dreamer.Services
@using Sakura.Live.Speech.Core.Services
@using Microsoft.CognitiveServices.Speech
@inject OpenAiService OpenAiService
@inject GreetingService GreetingService
@inject ConversationService ConversationService
@inject AzureSpeechService AzureSpeechService
@inject AzureConversationService AzureConversationService

<h1>Open AI</h1>

<TwitchSettingsModal />

<h2>Greetings</h2>

<p>Create your own style of greetings dynamically!</p>

<div class="input-group mb-3">
    <ServiceConfigButton Service="@OpenAiService" />
    <span class="input-group-text"
          id="open-ai-key">API Key</span>
    <input type="text"
           class="form-control"
           placeholder="OpenAI API key"
           aria-label="Name"
           aria-describedby="open-ai-key"
           @bind-value="OpenAiService.ApiKey">
</div>

<div class="input-group mb-3">
    <span class="input-group-text"
          id="greeting-prompt">Prompt</span>
    <input type="text"
           class="form-control"
           placeholder="How do you want your bot to behave?"
           aria-label="Prompt"
           aria-describedby="greeting-prompt"
           @bind-value="GreetingService.Prompt">
</div>

<div class="input-group mb-3">
    <span class="input-group-text"
          id="greeting-character-limit">Max Words</span>
    <NumericEdit TValue="int"
                 Value="GreetingService.Characters"
                 Min="1" />
</div>

<StartStopButton StartText="Start"
                 StopText="Stop"
                 IsRunning="@IsGreetingServiceRunning"
                 @onclick="StartGreetingService_OnClick" />

<h2>Conversational</h2>

<AzureSpeechSettingsModal />

<div class="input-group mb-3">
    <span class="input-group-text"
          id="conversational-prompt">Prompt</span>
    <input type="text"
           class="form-control"
           placeholder="How do you want your bot to behave?"
           aria-label="Prompt"
           aria-describedby="conversational-prompt"
           @bind-value="ConversationService.Prompt">
</div>

<h3>Input</h3>
<article>
    @SpeechInput
</article>

<h3>Response</h3>
<article>
    @ConversationResponse
</article>

<StartStopButton StartText="Start"
                 StopText="Stop"
                 IsRunning="@IsConversationServiceRunning"
                 @onclick="StartConversationService_OnClick" />

@code {
    /// <summary>
    /// Gets or sets the running status of the Greeting service
    /// </summary>
    public bool IsGreetingServiceRunning { get; set; }

    /// <summary>
    /// Gets or sets the running status of the Conversation service
    /// </summary>
    public bool IsConversationServiceRunning { get; set; }

    string _speechInput;

    /// <summary>
    /// Gets or sets the speech input
    /// </summary>
    string SpeechInput {
        get => _speechInput;
        set {
            if (_speechInput == value) {
                return;
            }
            _speechInput = value;
            InvokeAsync(StateHasChanged);
        }
    }

    string _conversationResponse;
    /// <summary>
    /// Gets or sets the response output
    /// </summary>
    public string ConversationResponse
    {
        get => _conversationResponse;
        set
        {
            if (_conversationResponse == value)
            {
                return;
            }

            _conversationResponse = value;
            InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Starts or stops the greeting service
    /// </summary>
    async void StartGreetingService_OnClick()
    {
        if (IsGreetingServiceRunning)
        {
            await GreetingService.StopAsync();
            IsGreetingServiceRunning = false;
        }
        else
        {
            await GreetingService.StartAsync();
            IsGreetingServiceRunning = true;
        }
    }

    /// <summary>
    /// Starts or stops the conversation service
    /// </summary>
    void StartConversationService_OnClick()
    {
        if (IsConversationServiceRunning)
        {
            AzureConversationService.Stop();
            AzureConversationService.OnResponse -= AzureConversationServiceOnOnResponse;
            IsConversationServiceRunning = false;
        }
        else
        {
            AzureSpeechService.Recognized += SpeechRecognized;
            AzureConversationService.OnResponse += AzureConversationServiceOnOnResponse;
            AzureConversationService.Start();
            IsConversationServiceRunning = true;
        }
    }

    /// <summary>
    /// Outputs the speech input from the Azure Speech Service
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    void SpeechRecognized(object sender, SpeechRecognitionEventArgs e)
    {
        SpeechInput = e.Result.Text;
    }

    /// <summary>
    /// Outputs the response text from the Azure Conversation Service
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    void AzureConversationServiceOnOnResponse(object sender, string e)
    {
        ConversationResponse = e;
    }
}
