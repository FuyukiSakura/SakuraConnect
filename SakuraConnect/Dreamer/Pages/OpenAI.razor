@page "/openai"
@using Sakura.Live.OpenAi.Core.Services
@using Sakura.Live.Connect.Dreamer.Services
@using Sakura.Live.Speech.Core.Services
@using Microsoft.CognitiveServices.Speech
@using Sakura.Live.Connect.Dreamer.Services.Ai
@using Sakura.Live.Connect.Dreamer.Services.Twitch
@inject OpenAiService OpenAiService
@inject GreetingService GreetingService
@inject AzureSpeechService AzureSpeechService
@inject AzureConversationService AzureConversationService
@inject AiChatServices AiChatServices
@inject OneCommeService OneCommeSvc

<h3>AI VTubing</h3>

<AiCharacterSettingsModal />
<ServiceConfigButton Service="@OneCommeSvc"
                     Text="OneComme" />
<TwitchSettingsModal />
<AzureTextAnalyticsSettingsModal />

<h4>Greetings</h4>

<p>Create your own style of greetings dynamically!</p>

<div class="input-group mb-3">
    <span class="input-group-text"
          id="open-ai-key">API Key</span>
    <input type="password"
           class="form-control"
           placeholder="OpenAI API key"
           aria-label="Name"
           aria-describedby="open-ai-key"
           @bind-value="OpenAiService.ApiKey">
</div>

<div class="input-group mb-3">
    <span class="input-group-text"
          id="greeting-character-limit">Max Words</span>
    <NumericEdit TValue="int"
                 Value="GreetingService.Characters"
                 Min="1" />
</div>

<StartStopButton StartText="Start"
                 StopText="Stop"
                 IsRunning="@IsGreetingServiceRunning"
                 @onclick="StartGreetingService_OnClick" />

<h4>Voice Input</h4>

<AzureSpeechSettingsModal />

<h5>Input</h5>
<article>
    @SpeechInput
</article>

<h5>Response</h5>
<article>
    @ConversationResponse
</article>

<StartStopButton StartText="Start"
                 StopText="Stop"
                 IsRunning="@IsConversationServiceRunning"
                 @onclick="StartConversationService_OnClick" />

<h3>Chat response</h3>
<div class="tw-flex tw-flex-row tw-space-x-2">
    <StartStopButton IsRunning="@AiChatServices.IsChatResponseRunning"
                     StartText="Start"
                     StopText="Stop"
                     OnClick="StartChatService_OnClick" />
    <StartStopButton IsRunning="@AiChatServices.IsChatMonitorRunning"
                     StartText="Monitor chat"
                     StopText="Stop monitoring"
                     OnClick="MonitorChat_OnClick" />
</div>

@code {
    /// <summary>
    /// Gets or sets the running status of the Greeting service
    /// </summary>
    public bool IsGreetingServiceRunning { get; set; }

    /// <summary>
    /// Gets or sets the running status of the Conversation service
    /// </summary>
    public bool IsConversationServiceRunning { get; set; }

    /// <summary>
    /// Gets or sets the speech input
    /// </summary>
    string SpeechInput { get; set; }

    /// <summary>
    /// Gets or sets the response output
    /// </summary>
    public string ConversationResponse { get; set; }

    /// <summary>
    /// Starts or stops the greeting service
    /// </summary>
    async void StartGreetingService_OnClick()
    {
        if (IsGreetingServiceRunning)
        {
            await GreetingService.StopAsync();
            IsGreetingServiceRunning = false;
        }
        else
        {
            await GreetingService.StartAsync();
            IsGreetingServiceRunning = true;
        }
    }

    /// <summary>
    /// Starts or stops the conversation service
    /// </summary>
    void StartConversationService_OnClick()
    {
        if (IsConversationServiceRunning)
        {
            AzureConversationService.Stop();
            AzureConversationService.OnResponse -= AzureConversationServiceOnOnResponse;
            IsConversationServiceRunning = false;
        }
        else
        {
            AzureSpeechService.Recognized += SpeechRecognized;
            AzureConversationService.OnResponse += AzureConversationServiceOnOnResponse;
            AzureConversationService.Start();
            IsConversationServiceRunning = true;
        }
    }

    /// <summary>
    /// Outputs the speech input from the Azure Speech Service
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    async void SpeechRecognized(object sender, SpeechRecognitionEventArgs e)
    {
        SpeechInput = e.Result.Text;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Outputs the response text from the Azure Conversation Service
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    async void AzureConversationServiceOnOnResponse(object sender, string e)
    {
        ConversationResponse = e;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Starts monitoring for chat messages and responding to them
    /// </summary>
    async void StartChatService_OnClick()
    {
        await AiChatServices.ToggleChatResponseAsync();
    }

    /// <summary>
    /// Starts the chat monitor
    /// </summary>
    async void MonitorChat_OnClick()
    {
        await AiChatServices.ToggleChatMonitorAsync();
    }

    ///
    /// <inheritdoc />
    ///
    protected override void OnInitialized()
    {
        base.OnInitialized();
        AzureSpeechService.Recognized += SpeechRecognized;
        AzureConversationService.OnResponse += AzureConversationServiceOnOnResponse;
    }
}
