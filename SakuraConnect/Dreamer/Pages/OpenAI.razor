@page "/openai"
@using Sakura.Live.OpenAi.Core.Services
@using Sakura.Live.Connect.Dreamer.Models.Preferences
@using Sakura.Live.Twitch.Core.Services
@inject OpenAiService OpenAiService
@inject GreetingService GreetingService
@inject TwitchChatService TwitchChatService

<h1>Open AI</h1>

<h2>Greetings</h2>

<p>Create your own style of greetings dynamically!</p>

<div class="input-group mb-3">
    <ServiceConfigButton Service="@OpenAiService" />
    <span class="input-group-text"
          id="open-ai-key">API Key</span>
    <input type="text"
           class="form-control"
           placeholder="OpenAI API key"
           aria-label="Name"
           aria-describedby="open-ai-key"
           @bind-value="OpenAiService.ApiKey">
</div>

<div class="input-group mb-3">
    <span class="input-group-text"
          id="greeting-prompt">Prompt</span>
    <input type="text"
           class="form-control"
           placeholder="How do you want your bot to behave?"
           aria-label="Prompt"
           aria-describedby="greeting-prompt"
           @bind-value="GreetingService.Prompt">
</div>

<div class="input-group mb-3">
    <span class="input-group-text"
          id="greeting-character-limit">Max Words</span>
    <NumberInput class="form-control"
                 TValue="int"
                 aria-label="Words"
                 aria-describedby="greeting-word-limit"
                 placeholder="Max number of words the greeting can contain."
                 @bind-Value="@GreetingService.Characters" />
</div>

<h2>Twitch</h2>

<div class="input-group mb-3">
    <ServiceConfigButton Service="@TwitchChatService" />
    <span class="input-group-text"
          id="twich-username">Username</span>
    <input type="text"
           class="form-control"
           placeholder="Username"
           aria-label="Name"
           aria-describedby="twich-username"
           @bind-value="TwitchChatService.Username">
</div>

<div class="input-group mb-3">
    <span class="input-group-text"
          id="twich-access-token">Access Token</span>
    <input type="text"
           class="form-control"
           placeholder="AccessToken"
           aria-label="AccessToken"
           aria-describedby="twich-access-token"
           @bind-value="TwitchChatService.AccessToken">
</div>

<div class="input-group mb-3">
    <span class="input-group-text"
          id="twich-channel">Channel</span>
    <input type="text"
           class="form-control"
           placeholder="Channel"
           aria-label="Channel"
           aria-describedby="twich-channel"
           @bind-value="TwitchChatService.Channel">
</div>

<StartStopButton StartText="Start"
                 StopText="Stop"
                 IsRunning="@IsServerRunning"
                 @onclick="StartService_OnClick" />

@code {
    /// <summary>
    /// Gets or sets the running status of the VMC server
    /// </summary>
    public bool IsServerRunning { get; set; }

    /// <summary>
    /// 
    /// </summary>
    async void StartService_OnClick()
    {
        // TODO: Use dependency type of start
        if (IsServerRunning)
        {
            await GreetingService.StopAsync();
            IsServerRunning = false;
        }
        else
        {
            SaveOpenAiSettings();
            await GreetingService.StartAsync();
            IsServerRunning = true;
        }
    }

    ///
    /// <inheritdoc />
    ///
    protected override void OnInitialized()
    {
        LoadOpenAiSettings();
        base.OnInitialized();
    }

    /// <summary>
    /// Saves Open Ai Settings
    /// </summary>
    void SaveOpenAiSettings()
    {
        Preferences.Set(
            OpenAiPreferenceKeys.ApiKey,
            OpenAiService.ApiKey,
            OpenAiPreferenceKeys.ContainerKey);
    }

    /// <summary>
    /// Loads Open Ai Settings
    /// </summary>
    void LoadOpenAiSettings()
    {
        OpenAiService.ApiKey = Preferences.Get(
            OpenAiPreferenceKeys.ApiKey,
            "",
            OpenAiPreferenceKeys.ContainerKey);
    }

}
